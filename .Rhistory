reticulate::py_last_error()
reticulate::repl_python()
setwd("/media/rizbicki/Dropbox/Izbicki/Research/pipges/DiaTematico")
# Carregando as bibliotecas necessárias
library(ggplot2)
# Definindo a função de distribuição acumulada F(x) - função logística
F <- function(x) {
return(1 / (1 + exp(-x)))
}
# Definindo a inversa da função de distribuição acumulada F_inv(u)
F_inv <- function(u) {
return(-log((1 / u) - 1))
}
# Gerando valores de x e u
x <- seq(-4, 10, length.out = 400)
u <- seq(0.01, 0.99, length.out = 400)
# Definindo o valor de U para plotar as linhas
u_value <- 0.7
x_value <- F_inv(u_value)
# Criando o gráfico
ggplot(data = data.frame(x = x, F_x = F(x))) +
geom_line(aes(x = x, y = F_x), color = "black") +
geom_hline(yintercept = u_value, linetype = "dotted", color = "red") +
geom_vline(xintercept = x_value, linetype = "dotted", color = "red") +
annotate("text", x = x_value - 0.4, y = -0.05, label = expression(F^{-1}(u)), color = "red", size = 5) +
annotate("text", x = -5.5, y = u_value - 0.02, label = "u", color = "red", size = 5) +
labs(title = "Representação da Função de Distribuição Acumulada e sua Inversa",
x = "x", y = "F(x)") +
ylim(0, 1.2) +
theme_minimal()
# Criando o gráfico
ggplot(data = data.frame(x = x, F_x = F(x))) +
geom_line(aes(x = x, y = F_x), color = "black") +
geom_hline(yintercept = u_value, linetype = "dotted", color = "red") +
geom_vline(xintercept = x_value, linetype = "dotted", color = "red") +
annotate("text", x = x_value - 0.4, y = -0, label = expression(F^{-1}(u)), color = "red", size = 5) +
annotate("text", x = -5.5, y = u_value - 0.02, label = "u", color = "red", size = 5) +
labs(title = "Representação da Função de Distribuição Acumulada e sua Inversa",
x = "x", y = "F(x)") +
ylim(0, 1.2) +
theme_minimal()
reticulate::repl_python()
library(ggplot2)
# Função densidade alvo f(x)
f <- function(x) {
20 * x * (1 - x)^3
}
# Função densidade proposta g(x) (distribuição uniforme)
g <- function(x) {
rep(1, length(x))  # g(x) é uniforme no intervalo (0, 1)
}
# Constante c (máximo de f(x))
opt_result <- optimize(f = function(x) -f(x), interval = c(0, 1))
c <- f(opt_result$minimum)
# Gerar valores de x
x <- seq(0, 1, length.out = 1000)
# Valor de Y para aceitar/rejeitar (escolhido aleatoriamente)
Y <- 0.6
# DataFrame para o gráfico
df <- data.frame(x = x, fx = f(x), gx = c * g(x))
# Plotando as funções f(x) e a linha horizontal c*g(x)
ggplot(df, aes(x = x)) +
geom_line(aes(y = fx), color = "black", size = 1) +
geom_hline(yintercept = c * g(x), color = "blue", size = 1.5) +
# Destacar a área de aceitação e rejeição
geom_vline(xintercept = Y, color = "green", size = 1.5) +
geom_text(aes(x = Y + 0.025, y = 0.05, label = "Y"), color = "black", size = 5) +
geom_segment(aes(x = Y, xend = Y, y = 0, yend = f(Y)), color = "green", size = 1.5) +
geom_segment(aes(x = Y, xend = Y, y = f(Y), yend = c * g(Y)), color = "red", size = 1.5) +
# Adicionar rótulos de Aceitar/Rejeitar
geom_text(aes(x = Y + 0.01, y = f(Y) / 2, label = "Aceitar x"), color = "green", size = 4) +
geom_text(aes(x = Y + 0.01, y = f(Y) + (c * g(Y) - f(Y)) / 2, label = "Rejeitar x"), color = "red", size = 4) +
# Limites e rótulos
xlim(0, 1) +
ylim(0, 2.5) +
labs(x = "x", y = "Densidade", title = "Amostragem por Rejeição para g uniforme") +
theme_minimal()
library(ggplot2)
# Função densidade alvo f(x)
f <- function(x) {
20 * x * (1 - x)^3
}
# Função densidade proposta g(x) (distribuição uniforme)
g <- function(x) {
rep(1, length(x))  # g(x) é uniforme no intervalo (0, 1)
}
# Constante c (máximo de f(x))
opt_result <- optimize(f = function(x) -f(x), interval = c(0, 1))
c <- f(opt_result$minimum)
# Gerar valores de x
x <- seq(0, 1, length.out = 1000)
# Valor de Y para aceitar/rejeitar (escolhido aleatoriamente)
Y <- 0.6
# DataFrame para o gráfico
df <- data.frame(x = x, fx = f(x), gx = c * g(x))
# Plotando as funções f(x) e a linha horizontal c*g(x)
ggplot(df, aes(x = x)) +
geom_line(aes(y = fx), color = "black", size = 1) +
geom_hline(yintercept = c * g(x), color = "blue", size = 1.5) +
# Destacar a área de aceitação e rejeição
#geom_vline(xintercept = Y, color = "green", size = 1.5) +
geom_text(aes(x = Y + 0.025, y = 0.05, label = "Y"), color = "black", size = 5) +
geom_segment(aes(x = Y, xend = Y, y = 0, yend = f(Y)), color = "green", size = 1.5) +
geom_segment(aes(x = Y, xend = Y, y = f(Y), yend = c * g(Y)), color = "red", size = 1.5) +
# Adicionar rótulos de Aceitar/Rejeitar
geom_text(aes(x = Y + 0.01, y = f(Y) / 2, label = "Aceitar x"), color = "green", size = 4) +
geom_text(aes(x = Y + 0.01, y = f(Y) + (c * g(Y) - f(Y)) / 2, label = "Rejeitar x"), color = "red", size = 4) +
# Limites e rótulos
xlim(0, 1) +
ylim(0, 2.5) +
labs(x = "x", y = "Densidade", title = "Amostragem por Rejeição para g uniforme") +
theme_minimal()
library(ggplot2)
# Função densidade alvo f(x)
f <- function(x) {
20 * x * (1 - x)^3
}
# Função densidade proposta g(x) (distribuição uniforme)
g <- function(x) {
rep(1, length(x))  # g(x) é uniforme no intervalo (0, 1)
}
# Constante c (máximo de f(x))
opt_result <- optimize(f = function(x) -f(x), interval = c(0, 1))
c <- f(opt_result$minimum)
# Gerar valores de x
x <- seq(0, 1, length.out = 1000)
# Valor de Y para aceitar/rejeitar (escolhido aleatoriamente)
Y <- 0.6
# DataFrame para o gráfico
df <- data.frame(x = x, fx = f(x), gx = c * g(x))
# Plotando as funções f(x) e a linha horizontal c*g(x)
ggplot(df, aes(x = x)) +
geom_line(aes(y = fx), color = "black", size = 1) +
geom_hline(yintercept = c * g(x), color = "blue", size = 1.5) +
# Destacar a área de aceitação e rejeição
geom_text(aes(x = Y + 0.025, y = 0.05, label = "Y"), color = "black", size = 5) +
geom_segment(aes(x = Y, xend = Y, y = 0, yend = f(Y)), color = "green", size = 1.5) +
geom_segment(aes(x = Y, xend = Y, y = f(Y), yend = c * g(Y)), color = "red", size = 1.5) +
# Mover rótulos de Aceitar/Rejeitar para a esquerda da linha Y
geom_text(aes(x = Y - 0.025, y = f(Y) / 2, label = "Aceitar x"), color = "green", size = 4) +
geom_text(aes(x = Y - 0.025, y = f(Y) + (c * g(Y) - f(Y)) / 2, label = "Rejeitar x"), color = "red", size = 4) +
# Limites e rótulos
xlim(0, 1) +
ylim(0, 2.5) +
labs(x = "x", y = "Densidade", title = "Amostragem por Rejeição para g uniforme") +
theme_minimal()
library(ggplot2)
# Função densidade alvo f(x)
f <- function(x) {
20 * x * (1 - x)^3
}
# Função densidade proposta g(x) (distribuição uniforme)
g <- function(x) {
rep(1, length(x))  # g(x) é uniforme no intervalo (0, 1)
}
# Constante c (máximo de f(x))
opt_result <- optimize(f = function(x) -f(x), interval = c(0, 1))
c <- f(opt_result$minimum)
# Gerar valores de x
x <- seq(0, 1, length.out = 1000)
# Valor de Y para aceitar/rejeitar (escolhido aleatoriamente)
Y <- 0.6
# DataFrame para o gráfico
df <- data.frame(x = x, fx = f(x), gx = c * g(x))
# Plotando as funções f(x) e a linha horizontal c*g(x)
ggplot(df, aes(x = x)) +
geom_line(aes(y = fx), color = "black", size = 1) +
geom_hline(yintercept = c * g(x), color = "blue", size = 1.5) +
# Destacar a área de aceitação e rejeição
geom_text(aes(x = Y + 0.025, y = 0.05, label = "Y"), color = "black", size = 5) +
geom_segment(aes(x = Y, xend = Y, y = 0, yend = f(Y)), color = "green", size = 1.5) +
geom_segment(aes(x = Y, xend = Y, y = f(Y), yend = c * g(Y)), color = "red", size = 1.5) +
# Mover rótulos de Aceitar/Rejeitar para a esquerda da linha Y
geom_text(aes(x = Y + 0.1, y = f(Y) / 2, label = "Aceitar x"), color = "green", size = 4) +
geom_text(aes(x = Y + 0.1, y = f(Y) + (c * g(Y) - f(Y)) / 2, label = "Rejeitar x"), color = "red", size = 4) +
# Limites e rótulos
xlim(0, 1) +
ylim(0, 2.5) +
labs(x = "x", y = "Densidade", title = "Amostragem por Rejeição para g uniforme") +
theme_minimal()
library(ggplot2)
# Função densidade alvo f(x)
f <- function(x) {
20 * x * (1 - x)^3
}
# Função densidade proposta g(x) (distribuição uniforme)
g <- function(x) {
rep(1, length(x))  # g(x) é uniforme no intervalo (0, 1)
}
# Constante c (máximo de f(x))
opt_result <- optimize(f = function(x) -f(x), interval = c(0, 1))
c <- f(opt_result$minimum)
# Gerar valores de x
x <- seq(0, 1, length.out = 1000)
# Valor de Y para aceitar/rejeitar (escolhido aleatoriamente)
Y <- 0.6
# DataFrame para o gráfico
df <- data.frame(x = x, fx = f(x), gx = c * g(x))
# Plotando as funções f(x) e a linha horizontal c*g(x)
ggplot(df, aes(x = x)) +
geom_line(aes(y = fx), color = "black", size = 1) +
geom_hline(yintercept = c * g(x), color = "blue", size = 1.5) +
# Destacar a área de aceitação e rejeição
geom_text(aes(x = Y + 0.025, y = 0.05, label = "Y"), color = "black", size = 5) +
geom_segment(aes(x = Y, xend = Y, y = 0, yend = f(Y)), color = "green", size = 1.5) +
geom_segment(aes(x = Y, xend = Y, y = f(Y), yend = c * g(Y)), color = "red", size = 1.5) +
# Mover rótulos de Aceitar/Rejeitar para a esquerda da linha Y
geom_text(aes(x = Y + 0.07, y = f(Y) / 2, label = "Aceitar x"), color = "green", size = 4) +
geom_text(aes(x = Y + 0.07, y = f(Y) + (c * g(Y) - f(Y)) / 2, label = "Rejeitar x"), color = "red", size = 4) +
# Limites e rótulos
xlim(0, 1) +
ylim(0, 2.5) +
labs(x = "x", y = "Densidade", title = "Amostragem por Rejeição para g uniforme") +
theme_minimal()
library(ggplot2)
# Função densidade alvo f(x)
f <- function(x) {
20 * x * (1 - x)^3
}
# Função densidade proposta g(x) (distribuição uniforme)
g <- function(x) {
rep(1, length(x))  # g(x) é uniforme no intervalo (0, 1)
}
# Constante c (máximo de f(x))
opt_result <- optimize(f = function(x) -f(x), interval = c(0, 1))
c <- f(opt_result$minimum)
# Gerar valores de x
x <- seq(0, 1, length.out = 1000)
# Valor de Y para aceitar/rejeitar (escolhido aleatoriamente)
Y <- 0.6
# DataFrame para o gráfico
df <- data.frame(x = x, fx = f(x), gx = c * g(x))
# Plotando as funções f(x) e a linha horizontal c*g(x)
ggplot(df, aes(x = x)) +
geom_line(aes(y = fx, color = "f(x)"), size = 1) +
geom_hline(aes(yintercept = c * g(x), color = "c * g(x)"), size = 1.5) +
# Destacar a área de aceitação e rejeição
geom_text(aes(x = Y + 0.025, y = 0.05, label = "Y"), color = "black", size = 5) +
geom_segment(aes(x = Y, xend = Y, y = 0, yend = f(Y)), color = "green", size = 1.5) +
geom_segment(aes(x = Y, xend = Y, y = f(Y), yend = c * g(Y)), color = "red", size = 1.5) +
# Mover rótulos de Aceitar/Rejeitar para a esquerda da linha Y
geom_text(aes(x = Y + 0.06, y = f(Y) / 2, label = "Aceitar x"), color = "green", size = 4) +
geom_text(aes(x = Y + 0.06, y = f(Y) + (c * g(Y) - f(Y)) / 2, label = "Rejeitar x"), color = "red", size = 4) +
# Limites e rótulos
xlim(0, 1) +
ylim(0, 2.5) +
labs(x = "x", y = "Densidade", title = "Amostragem por Rejeição para g uniforme") +
# Legenda
scale_color_manual(values = c("f(x)" = "black", "c * g(x)" = "blue"), name = "Funções") +
theme_minimal() +
theme(legend.position = "bottom")
library(ggplot2)
# Função densidade alvo f(x)
f <- function(x) {
20 * x * (1 - x)^3
}
# Amostragem por rejeição
amostragem_rejeicao <- function(f, c, n_amostras) {
amostras <- numeric(0)
while (length(amostras) < n_amostras) {
# Gere Y ~ g(x) (uniforme entre 0 e 1)
Y <- runif(1, 0, 1)
# Gere U ~ Uniforme(0, 1)
U <- runif(1, 0, 1)
# Verifica se aceitamos Y
if (U <= f(Y) / (c)) {
amostras <- c(amostras, Y)
}
return(amostras)
}
# A constante c é o limite superior de f(x)
c <- 135 / 64
# Gere 1000 amostras usando o método de aceitação e rejeição
set.seed(123)
amostras <- amostragem_rejeicao(f, c, 1000)
# Criação do data frame para o ggplot2
x_vals <- seq(0, 1, length.out = 1000)
f_vals <- f(x_vals)
df <- data.frame(x = x_vals, y = f_vals)
# Gráfico com ggplot2
ggplot() +
geom_line(data = df, aes(x = x, y = y), color = 'blue', size = 1, linetype = 'solid') +
geom_histogram(aes(x = amostras, y = ..density..), bins = 30, fill = 'orange', alpha = 0.5, color = 'black') +
ggtitle("Amostragem por Rejeição") +
xlab("x") +
ylab("Densidade") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
