np.random.seed(459)
N = np.arange(1, 1501, 1)
z = np.zeros(len(N))
for i in range(len(N)):
x = 2 * np.random.uniform(0, 1) - 1
y = 2 * np.random.uniform(0, 1) - 1
z[i] = (x**2 + y**2 <= 1).astype(int)
theta_hat = np.cumsum(z) / N
pi_hat = theta_hat * 4
plt.plot(N, pi_hat)
plt.axhline(y=np.pi, color='red', linestyle='--')
plt.xlabel('n')
plt.ylabel(r'$\hat{\pi}_n$')
plt.title(r'Aproximação de $\pi$')
plt.show()
np.random.seed(459)
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import gamma
np.random.seed(459)
N = np.arange(1, 1501, 1)
z = np.zeros(len(N))
for i in range(len(N)):
x = 2 * np.random.uniform(0, 1) - 1
y = 2 * np.random.uniform(0, 1) - 1
z[i] = (x**2 + y**2 <= 1).astype(int)
for i in range(len(N)):
x = 2 * np.random.uniform(0, 1) - 1
y = 2 * np.random.uniform(0, 1) - 1
z[i] = (x**2 + y**2 <= 1)
theta_hat = np.cumsum(z) / N
pi_hat = theta_hat * 4
plt.plot(N, pi_hat)
plt.axhline(y=np.pi, color='red', linestyle='--')
plt.xlabel('n')
plt.ylabel(r'$\hat{\pi}_n$')
plt.title(r'Aproximação de $\pi$')
plt.show()
Titanic
nycflights13
library(ggplot2)
# Funções
h_f <- function(x) sqrt(x) * dexp(x, 1)
g <- function(x) 0.5 * exp(-0.5 * x)  # Exemplo para g(x)
g2 <- function(x) 0.8 * exp(-0.3 * x) # Exemplo para g2(x)
# Dados
x_vals <- seq(0, 3, length.out = 100)
data <- data.frame(
x = x_vals,
`h(x)f(x)` = h_f(x_vals),
`g(x)` = g(x_vals),
`g2(x)` = g2(x_vals)
)
# Gráfico
ggplot(data, aes(x)) +
geom_line(aes(y = `h(x)f(x)`, color = "h(x)f(x)"), size = 1.2) +
geom_line(aes(y = `g(x)`, color = "g(x)"), size = 1.2) +
geom_line(aes(y = `g2(x)`, color = "g2(x)"), size = 1.2) +
scale_color_manual(values = c("h(x)f(x)" = "black", "g(x)" = "red", "g2(x)" = "blue")) +
labs(y = "Value", color = "Functions", title = "Plot of $h(x)f(x)$, $g(x)$ and $g2(x)$") +
theme_minimal(base_size = 15)
library(ggplot2)
# Funções
h_f <- function(x) sqrt(x) * dexp(x, 1)
g <- function(x) 0.5 * exp(-0.5 * x)  # Exemplo para g(x)
g2 <- function(x) 0.8 * exp(-0.3 * x) # Exemplo para g2(x)
# Dados
x_vals <- seq(0, 3, length.out = 100)
data <- data.frame(
x = x_vals,
h_f = h_f(x_vals),
g = g(x_vals),
g2 = g2(x_vals)
)
# Gráfico
ggplot(data, aes(x)) +
geom_line(aes(y = h_f, color = "h(x)f(x)"), size = 1.2) +
geom_line(aes(y = g, color = "g(x)"), size = 1.2) +
geom_line(aes(y = g2, color = "g2(x)"), size = 1.2) +
scale_color_manual(values = c("h(x)f(x)" = "black", "g(x)" = "red", "g2(x)" = "blue")) +
labs(y = "Value", color = "Functions", title = "Plot of h(x)f(x), g(x) and g2(x)") +
theme_minimal(base_size = 15)
# Gráfico de h*f/g
curve(sqrt(x) * dexp(x,1) / g(x), from=0, to=3, type="l", ylim=c(0,10))
# Gráfico de h*f/g2
curve(sqrt(x) * dexp(x,1) / g2(x), from=0, to=3, type="l", col="red", add=T)
# Gráfico de h*f/g
curve(sqrt(x) * dexp(x,1) / g(x), from=0, to=3, type="l", ylim=c(0,10))
# Gráfico de h*f/g2
curve(sqrt(x) * dexp(x,1) / g2(x), from=0, to=3, type="l", col="red", add=T)
library(ggplot2)
# Funções
h_f <- function(x) sqrt(x) * dexp(x, 1)
g <- function(x) 0.5 * exp(-0.5 * x)  # Exemplo para g(x)
g2 <- function(x) 0.8 * exp(-0.3 * x) # Exemplo para g2(x)
# Dados
x_vals <- seq(0, 3, length.out = 100)
data <- data.frame(
x = x_vals,
h_f_over_g = h_f(x_vals) / g(x_vals),
h_f_over_g2 = h_f(x_vals) / g2(x_vals)
)
# Gráfico
ggplot(data, aes(x)) +
geom_line(aes(y = h_f_over_g, color = "h(x)f(x) / g(x)"), size = 1.2) +
geom_line(aes(y = h_f_over_g2, color = "h(x)f(x) / g2(x)"), size = 1.2) +
scale_color_manual(values = c("h(x)f(x) / g(x)" = "black", "h(x)f(x) / g2(x)" = "red")) +
labs(y = "Value", color = "Functions", title = "Plot of h(x)f(x) / g(x) and h(x)f(x) / g2(x)") +
theme_minimal(base_size = 15)
library(ggplot2)
# Funções
h_f <- function(x) sqrt(x) * dexp(x, 1)
g <- function(x) 0.5 * exp(-0.5 * x)  # Exemplo para g(x)
g2 <- function(x) 0.8 * exp(-0.3 * x) # Exemplo para g2(x)
# Dados
x_vals <- seq(0, 3, length.out = 100)
data <- data.frame(
x = x_vals,
h_f = h_f(x_vals),
g = g(x_vals),
g2 = g2(x_vals)
)
# Gráfico
ggplot(data, aes(x)) +
geom_line(aes(y = h_f, color = "h(x)f(x)"), size = 1.2) +
geom_line(aes(y = g, color = "g(x)"), size = 1.2) +
geom_line(aes(y = g2, color = "g2(x)"), size = 1.2) +
scale_color_manual(values = c("h(x)f(x)" = "black", "g(x)" = "red", "g2(x)" = "blue")) +
labs(y = "Valor", color = "Funções") +
theme_minimal(base_size = 15)
set.seed(42)  # Para reprodutibilidade
set.seed(42)  # Para reprodutibilidade
# Função para estimar pi sem condicionamento
estimate_pi_simple <- function(n) {
U1 <- runif(n, -1, 1)
U2 <- runif(n, -1, 1)
Z <- ifelse(U1^2 + U2^2 <= 1, 1, 0)
return(4 * mean(Z))
}
# Função para estimar pi com condicionamento
estimate_pi_conditioning <- function(n) {
X <- runif(n, -1, 1)  # Gera X uniformemente em [-1,1]
g_Y <- sqrt(1 - X^2)  # Esperança condicional E[Z | X]
return(4 * mean(g_Y))
}
# Número de simulações
n <- 100000
pi_conditioning <- estimate_pi_conditioning(n)
# Resultados
cat("Estimativa de pi sem condicionamento:", pi_simple, "\n")
pi_simple
set.seed(42)  # Para reprodutibilidade
# Função para estimar pi sem condicionamento
estimate_pi_simple <- function(n) {
U1 <- runif(n, -1, 1)
U2 <- runif(n, -1, 1)
Z <- ifelse(U1^2 + U2^2 <= 1, 1, 0)
return(4 * mean(Z))
}
# Função para estimar pi com condicionamento
estimate_pi_conditioning <- function(n) {
X <- runif(n, -1, 1)  # Gera X uniformemente em [-1,1]
g_Y <- sqrt(1 - X^2)  # Esperança condicional E[Z | X]
return(4 * mean(g_Y))
}
# Número de simulações
n <- 100000
# Estimativas
pi_simple <- estimate_pi_simple(n)
pi_conditioning <- estimate_pi_conditioning(n)
# Resultados
cat("Estimativa de pi sem condicionamento:", pi_simple, "\n")
cat("Estimativa de pi com condicionamento:", pi_conditioning, "\n")
blogdown:::serve_site()
install.packages("knitr")
install.packages("tidyverse")
install.packages("rmarkdown")
install.packages("hflights")
install.packages("reticulate")
install.packages("randomForest")
install.packages("gmp")
install.packages("gpm")
install.packages("PGM")
install.packages("GPM")
library(gmp)
install.packages("gmp")
install.packages("gmp")
